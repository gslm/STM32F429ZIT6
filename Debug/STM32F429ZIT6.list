
STM32F429ZIT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003884  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa8  08003aa8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ab0  08003ab0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000244  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  200002a0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000094ab  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001779  00000000  00000000  0002957a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000798  00000000  00000000  0002acf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005c9  00000000  00000000  0002b490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022dbc  00000000  00000000  0002ba59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009495  00000000  00000000  0004e815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3d28  00000000  00000000  00057caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000023ac  00000000  00000000  0012b9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0012dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003a1c 	.word	0x08003a1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003a1c 	.word	0x08003a1c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0ce      	sub	sp, #312	; 0x138
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fb7f 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f8e1 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f99f 	bl	80008ec <MX_GPIO_Init>
  MX_CAN1_Init();
 80005ae:	f000 f93d 	bl	800082c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80005b2:	f000 f971 	bl	8000898 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  canfil.FilterBank = 0;
 80005b6:	4b63      	ldr	r3, [pc, #396]	; (8000744 <main+0x1a8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80005bc:	4b61      	ldr	r3, [pc, #388]	; (8000744 <main+0x1a8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005c2:	4b60      	ldr	r3, [pc, #384]	; (8000744 <main+0x1a8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 80005c8:	4b5e      	ldr	r3, [pc, #376]	; (8000744 <main+0x1a8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <main+0x1a8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 80005d4:	4b5b      	ldr	r3, [pc, #364]	; (8000744 <main+0x1a8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 80005da:	4b5a      	ldr	r3, [pc, #360]	; (8000744 <main+0x1a8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80005e0:	4b58      	ldr	r3, [pc, #352]	; (8000744 <main+0x1a8>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 80005e6:	4b57      	ldr	r3, [pc, #348]	; (8000744 <main+0x1a8>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 80005ec:	4b55      	ldr	r3, [pc, #340]	; (8000744 <main+0x1a8>)
 80005ee:	220e      	movs	r2, #14
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24

  txHeader.DLC = 8;
 80005f2:	4b55      	ldr	r3, [pc, #340]	; (8000748 <main+0x1ac>)
 80005f4:	2208      	movs	r2, #8
 80005f6:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 80005f8:	4b53      	ldr	r3, [pc, #332]	; (8000748 <main+0x1ac>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 80005fe:	4b52      	ldr	r3, [pc, #328]	; (8000748 <main+0x1ac>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x030;
 8000604:	4b50      	ldr	r3, [pc, #320]	; (8000748 <main+0x1ac>)
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0x02;
 800060a:	4b4f      	ldr	r3, [pc, #316]	; (8000748 <main+0x1ac>)
 800060c:	2202      	movs	r2, #2
 800060e:	605a      	str	r2, [r3, #4]
  txHeader.TransmitGlobalTime = DISABLE;
 8000610:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <main+0x1ac>)
 8000612:	2200      	movs	r2, #0
 8000614:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan1,&canfil);
 8000616:	494b      	ldr	r1, [pc, #300]	; (8000744 <main+0x1a8>)
 8000618:	484c      	ldr	r0, [pc, #304]	; (800074c <main+0x1b0>)
 800061a:	f000 fcd5 	bl	8000fc8 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800061e:	484b      	ldr	r0, [pc, #300]	; (800074c <main+0x1b0>)
 8000620:	f000 fdb2 	bl	8001188 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000624:	2102      	movs	r1, #2
 8000626:	4849      	ldr	r0, [pc, #292]	; (800074c <main+0x1b0>)
 8000628:	f000 ffdf 	bl	80015ea <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char buf[256] = {0};
 800062c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	3304      	adds	r3, #4
 800063a:	22fc      	movs	r2, #252	; 0xfc
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fd68 	bl	8003114 <memset>
	  char msg_buff[32] = {0};
 8000644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	3304      	adds	r3, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	619a      	str	r2, [r3, #24]

	  static uint8_t payload = 0;
	  static uint8_t txcount = 0;
	  int i = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  uint8_t csend[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, (payload + 0x40), payload};
 8000668:	2301      	movs	r3, #1
 800066a:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 800066e:	2302      	movs	r3, #2
 8000670:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 8000674:	2303      	movs	r3, #3
 8000676:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800067a:	2304      	movs	r3, #4
 800067c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8000680:	2305      	movs	r3, #5
 8000682:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
 8000686:	2306      	movs	r3, #6
 8000688:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
 800068c:	4b30      	ldr	r3, [pc, #192]	; (8000750 <main+0x1b4>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	3340      	adds	r3, #64	; 0x40
 8000692:	b2db      	uxtb	r3, r3
 8000694:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
 8000698:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <main+0x1b4>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
	  payload++;
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <main+0x1b4>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b29      	ldr	r3, [pc, #164]	; (8000750 <main+0x1b4>)
 80006aa:	701a      	strb	r2, [r3, #0]
	  txcount++;
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <main+0x1b8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b27      	ldr	r3, [pc, #156]	; (8000754 <main+0x1b8>)
 80006b6:	701a      	strb	r2, [r3, #0]

	  HAL_CAN_AddTxMessage(&hcan1,&txHeader,csend,&canMailbox);
 80006b8:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <main+0x1bc>)
 80006be:	4922      	ldr	r1, [pc, #136]	; (8000748 <main+0x1ac>)
 80006c0:	4822      	ldr	r0, [pc, #136]	; (800074c <main+0x1b0>)
 80006c2:	f000 fda5 	bl	8001210 <HAL_CAN_AddTxMessage>

	  while (i < sizeof(csend))
 80006c6:	e015      	b.n	80006f4 <main+0x158>
	  {
	       snprintf(&msg_buff[i * 3], 4, "%02X-", (char)csend[i]);
 80006c8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	1d3a      	adds	r2, r7, #4
 80006d4:	18d0      	adds	r0, r2, r3
 80006d6:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80006da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4a1e      	ldr	r2, [pc, #120]	; (800075c <main+0x1c0>)
 80006e4:	2104      	movs	r1, #4
 80006e6:	f002 fce1 	bl	80030ac <sniprintf>
	       i++;
 80006ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80006ee:	3301      	adds	r3, #1
 80006f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  while (i < sizeof(csend))
 80006f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80006f8:	2b07      	cmp	r3, #7
 80006fa:	d9e5      	bls.n	80006c8 <main+0x12c>
	  }

	  snprintf(buf, sizeof(buf), "Sending CAN1 TX message %d: %s\n", txcount, msg_buff);
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <main+0x1b8>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4613      	mov	r3, r2
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <main+0x1c4>)
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	f002 fccb 	bl	80030ac <sniprintf>
	  HAL_UART_Transmit(&huart1, (const uint8_t *)buf, strlen((const char *)buf), 0xFFFF);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd68 	bl	80001f0 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <main+0x1c8>)
 800072e:	f002 f948 	bl	80029c2 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000736:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x1cc>)
 8000738:	f001 fc83 	bl	8002042 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f000 fb23 	bl	8000d88 <HAL_Delay>
  {
 8000742:	e773      	b.n	800062c <main+0x90>
 8000744:	20000120 	.word	0x20000120
 8000748:	20000100 	.word	0x20000100
 800074c:	20000078 	.word	0x20000078
 8000750:	2000014c 	.word	0x2000014c
 8000754:	2000014d 	.word	0x2000014d
 8000758:	20000148 	.word	0x20000148
 800075c:	08003a34 	.word	0x08003a34
 8000760:	08003a3c 	.word	0x08003a3c
 8000764:	200000a0 	.word	0x200000a0
 8000768:	40021800 	.word	0x40021800

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fcca 	bl	8003114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <SystemClock_Config+0xb8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <SystemClock_Config+0xb8>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <SystemClock_Config+0xb8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <SystemClock_Config+0xbc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <SystemClock_Config+0xbc>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <SystemClock_Config+0xbc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d8:	2300      	movs	r3, #0
 80007da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fc49 	bl	8002078 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007ec:	f000 f8dc 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f001 feac 	bl	8002568 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000816:	f000 f8c7 	bl	80009a8 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_CAN1_Init+0x64>)
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <MX_CAN1_Init+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_CAN1_Init+0x64>)
 8000838:	2204      	movs	r2, #4
 800083a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_CAN1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_CAN1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_CAN1_Init+0x64>)
 800084a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800084e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_CAN1_Init+0x64>)
 8000852:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000856:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_CAN1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_CAN1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_CAN1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_CAN1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_CAN1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_CAN1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_CAN1_Init+0x64>)
 800087e:	f000 faa7 	bl	8000dd0 <HAL_CAN_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000888:	f000 f88e 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000078 	.word	0x20000078
 8000894:	40006400 	.word	0x40006400

08000898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART1_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART1_UART_Init+0x4c>)
 80008d0:	f002 f82a 	bl	8002928 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f865 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000a0 	.word	0x200000a0
 80008e8:	40011000 	.word	0x40011000

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_GPIO_Init+0x80>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <MX_GPIO_Init+0x80>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_GPIO_Init+0x80>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_GPIO_Init+0x80>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <MX_GPIO_Init+0x80>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_GPIO_Init+0x80>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_GPIO_Init+0x84>)
 8000942:	f001 fb65 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000946:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800094a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_GPIO_Init+0x84>)
 8000960:	f001 f9aa 	bl	8001cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40021800 	.word	0x40021800

08000974 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fd1f 	bl	80013c6 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800098e:	f001 fb58 	bl	8002042 <HAL_GPIO_TogglePin>

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000118 	.word	0x20000118
 80009a0:	200000e4 	.word	0x200000e4
 80009a4:	40021800 	.word	0x40021800

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a26      	ldr	r2, [pc, #152]	; (8000abc <HAL_CAN_MspInit+0xb8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d145      	bne.n	8000ab2 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <HAL_CAN_MspInit+0xbc>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <HAL_CAN_MspInit+0xbc>)
 8000a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <HAL_CAN_MspInit+0xbc>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_CAN_MspInit+0xbc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_CAN_MspInit+0xbc>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_CAN_MspInit+0xbc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a70:	2309      	movs	r3, #9
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <HAL_CAN_MspInit+0xc0>)
 8000a7c:	f001 f91c 	bl	8001cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a92:	2309      	movs	r3, #9
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <HAL_CAN_MspInit+0xc0>)
 8000a9e:	f001 f90b 	bl	8001cb8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2014      	movs	r0, #20
 8000aa8:	f001 f8cf 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000aac:	2014      	movs	r0, #20
 8000aae:	f001 f8e8 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40006400 	.word	0x40006400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12c      	bne.n	8000b44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af4:	f043 0310 	orr.w	r3, r3, #16
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b34:	2307      	movs	r3, #7
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0x8c>)
 8000b40:	f001 f8ba 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f8d0 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <CAN1_RX0_IRQHandler+0x10>)
 8000bb2:	f000 fd40 	bl	8001636 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000078 	.word	0x20000078

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f002 fa98 	bl	8003124 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20030000 	.word	0x20030000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	20000150 	.word	0x20000150
 8000c28:	200002a0 	.word	0x200002a0

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd7 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f002 fa57 	bl	8003130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc8b 	bl	800059c <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c94:	08003ab8 	.word	0x08003ab8
  ldr r2, =_sbss
 8000c98:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c9c:	200002a0 	.word	0x200002a0

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 ffb1 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fe6c 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 ffc9 	bl	8001c9e <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 ff91 	bl	8001c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000154 	.word	0x20000154

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000154 	.word	0x20000154

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffde 	bl	8000d70 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e0ed      	b.n	8000fbe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff fe08 	bl	8000a04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0201 	orr.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e04:	f7ff ffb4 	bl	8000d70 <HAL_GetTick>
 8000e08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e0a:	e012      	b.n	8000e32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e0c:	f7ff ffb0 	bl	8000d70 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b0a      	cmp	r3, #10
 8000e18:	d90b      	bls.n	8000e32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2205      	movs	r2, #5
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e0c5      	b.n	8000fbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0e5      	beq.n	8000e0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0202 	bic.w	r2, r2, #2
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e50:	f7ff ff8e 	bl	8000d70 <HAL_GetTick>
 8000e54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e56:	e012      	b.n	8000e7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e58:	f7ff ff8a 	bl	8000d70 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b0a      	cmp	r3, #10
 8000e64:	d90b      	bls.n	8000e7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2205      	movs	r2, #5
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e09f      	b.n	8000fbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e5      	bne.n	8000e58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7e1b      	ldrb	r3, [r3, #24]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d108      	bne.n	8000ea6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e007      	b.n	8000eb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7e5b      	ldrb	r3, [r3, #25]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d108      	bne.n	8000ed0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e007      	b.n	8000ee0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ede:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7e9b      	ldrb	r3, [r3, #26]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d108      	bne.n	8000efa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0220 	orr.w	r2, r2, #32
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e007      	b.n	8000f0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0220 	bic.w	r2, r2, #32
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7edb      	ldrb	r3, [r3, #27]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d108      	bne.n	8000f24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0210 	bic.w	r2, r2, #16
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e007      	b.n	8000f34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0210 	orr.w	r2, r2, #16
 8000f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7f1b      	ldrb	r3, [r3, #28]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d108      	bne.n	8000f4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0208 	orr.w	r2, r2, #8
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e007      	b.n	8000f5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0208 	bic.w	r2, r2, #8
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7f5b      	ldrb	r3, [r3, #29]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d108      	bne.n	8000f78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0204 	orr.w	r2, r2, #4
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e007      	b.n	8000f88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0204 	bic.w	r2, r2, #4
 8000f86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	ea42 0103 	orr.w	r1, r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fde:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe0:	7cfb      	ldrb	r3, [r7, #19]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <HAL_CAN_ConfigFilter+0x26>
 8000fe6:	7cfb      	ldrb	r3, [r7, #19]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	f040 80be 	bne.w	800116a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000fee:	4b65      	ldr	r3, [pc, #404]	; (8001184 <HAL_CAN_ConfigFilter+0x1bc>)
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ff8:	f043 0201 	orr.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001008:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	431a      	orrs	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	2201      	movs	r2, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	401a      	ands	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d123      	bne.n	8001098 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001072:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3248      	adds	r2, #72	; 0x48
 8001078:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800108c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	3348      	adds	r3, #72	; 0x48
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d122      	bne.n	80010e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3248      	adds	r2, #72	; 0x48
 80010c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010dc:	6979      	ldr	r1, [r7, #20]
 80010de:	3348      	adds	r3, #72	; 0x48
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	401a      	ands	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001100:	e007      	b.n	8001112 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	431a      	orrs	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	401a      	ands	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800112c:	e007      	b.n	800113e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	431a      	orrs	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d107      	bne.n	8001156 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	431a      	orrs	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800115c:	f023 0201 	bic.w	r2, r3, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e006      	b.n	8001178 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
  }
}
 8001178:	4618      	mov	r0, r3
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40006400 	.word	0x40006400

08001188 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d12e      	bne.n	80011fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2202      	movs	r2, #2
 80011a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0201 	bic.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011b4:	f7ff fddc 	bl	8000d70 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011ba:	e012      	b.n	80011e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011bc:	f7ff fdd8 	bl	8000d70 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d90b      	bls.n	80011e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2205      	movs	r2, #5
 80011da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e012      	b.n	8001208 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e5      	bne.n	80011bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e006      	b.n	8001208 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
  }
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001224:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d003      	beq.n	800123c <HAL_CAN_AddTxMessage+0x2c>
 8001234:	7ffb      	ldrb	r3, [r7, #31]
 8001236:	2b02      	cmp	r3, #2
 8001238:	f040 80b8 	bne.w	80013ac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10a      	bne.n	800125c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 80a0 	beq.w	800139c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	0e1b      	lsrs	r3, r3, #24
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d907      	bls.n	800127c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e09e      	b.n	80013ba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800127c:	2201      	movs	r2, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	409a      	lsls	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10d      	bne.n	80012aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001298:	68f9      	ldr	r1, [r7, #12]
 800129a:	6809      	ldr	r1, [r1, #0]
 800129c:	431a      	orrs	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3318      	adds	r3, #24
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e00f      	b.n	80012ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ba:	68f9      	ldr	r1, [r7, #12]
 80012bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3318      	adds	r3, #24
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	440b      	add	r3, r1
 80012c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6819      	ldr	r1, [r3, #0]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3318      	adds	r3, #24
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	440b      	add	r3, r1
 80012da:	3304      	adds	r3, #4
 80012dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	7d1b      	ldrb	r3, [r3, #20]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d111      	bne.n	800130a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3318      	adds	r3, #24
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	3304      	adds	r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	6811      	ldr	r1, [r2, #0]
 80012fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3318      	adds	r3, #24
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	440b      	add	r3, r1
 8001306:	3304      	adds	r3, #4
 8001308:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3307      	adds	r3, #7
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	061a      	lsls	r2, r3, #24
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3306      	adds	r3, #6
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	041b      	lsls	r3, r3, #16
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3305      	adds	r3, #5
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	4313      	orrs	r3, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	3204      	adds	r2, #4
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	4610      	mov	r0, r2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	6811      	ldr	r1, [r2, #0]
 8001332:	ea43 0200 	orr.w	r2, r3, r0
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	440b      	add	r3, r1
 800133c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001340:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3303      	adds	r3, #3
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	061a      	lsls	r2, r3, #24
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3302      	adds	r3, #2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	041b      	lsls	r3, r3, #16
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3301      	adds	r3, #1
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	4313      	orrs	r3, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	4610      	mov	r0, r2
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	6811      	ldr	r1, [r2, #0]
 8001368:	ea43 0200 	orr.w	r2, r3, r0
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	440b      	add	r3, r1
 8001372:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001376:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3318      	adds	r3, #24
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	6811      	ldr	r1, [r2, #0]
 800138a:	f043 0201 	orr.w	r2, r3, #1
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3318      	adds	r3, #24
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	440b      	add	r3, r1
 8001396:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	e00e      	b.n	80013ba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e006      	b.n	80013ba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
  }
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	; 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013c6:	b480      	push	{r7}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d003      	beq.n	80013ea <HAL_CAN_GetRxMessage+0x24>
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	f040 80f3 	bne.w	80015d0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10e      	bne.n	800140e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0e7      	b.n	80015de <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d107      	bne.n	800142c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0d8      	b.n	80015de <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	331b      	adds	r3, #27
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0204 	and.w	r2, r3, #4
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10c      	bne.n	8001464 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	331b      	adds	r3, #27
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0d5b      	lsrs	r3, r3, #21
 800145a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e00b      	b.n	800147c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	331b      	adds	r3, #27
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	08db      	lsrs	r3, r3, #3
 8001474:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	331b      	adds	r3, #27
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0202 	and.w	r2, r3, #2
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	331b      	adds	r3, #27
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	4413      	add	r3, r2
 800149e:	3304      	adds	r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 020f 	and.w	r2, r3, #15
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	331b      	adds	r3, #27
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	3304      	adds	r3, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	331b      	adds	r3, #27
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	3304      	adds	r3, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0a1a      	lsrs	r2, r3, #8
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0c1a      	lsrs	r2, r3, #16
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	3302      	adds	r3, #2
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0e1a      	lsrs	r2, r3, #24
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3303      	adds	r3, #3
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	4413      	add	r3, r2
 8001548:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3304      	adds	r3, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	4413      	add	r3, r2
 8001560:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	0a1a      	lsrs	r2, r3, #8
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3305      	adds	r3, #5
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0c1a      	lsrs	r2, r3, #16
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3306      	adds	r3, #6
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0e1a      	lsrs	r2, r3, #24
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	3307      	adds	r3, #7
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d108      	bne.n	80015bc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0220 	orr.w	r2, r2, #32
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	e007      	b.n	80015cc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0220 	orr.w	r2, r2, #32
 80015ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e006      	b.n	80015de <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
  }
}
 80015de:	4618      	mov	r0, r3
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d002      	beq.n	8001608 <HAL_CAN_ActivateNotification+0x1e>
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d109      	bne.n	800161c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6959      	ldr	r1, [r3, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	e006      	b.n	800162a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
  }
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b08a      	sub	sp, #40	; 0x28
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d07c      	beq.n	8001776 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d023      	beq.n	80016ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2201      	movs	r2, #1
 800168c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f983 	bl	80019a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800169e:	e016      	b.n	80016ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
 80016b2:	e00c      	b.n	80016ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
 80016c6:	e002      	b.n	80016ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f989 	bl	80019e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d024      	beq.n	8001722 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f963 	bl	80019b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80016f2:	e016      	b.n	8001722 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
 8001706:	e00c      	b.n	8001722 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
 800171a:	e002      	b.n	8001722 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f969 	bl	80019f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d024      	beq.n	8001776 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001734:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f943 	bl	80019cc <HAL_CAN_TxMailbox2CompleteCallback>
 8001746:	e016      	b.n	8001776 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d004      	beq.n	800175c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
 800175a:	e00c      	b.n	8001776 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d004      	beq.n	8001770 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
 800176e:	e002      	b.n	8001776 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f949 	bl	8001a08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00c      	beq.n	800179a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001790:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2210      	movs	r2, #16
 8001798:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00b      	beq.n	80017bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2208      	movs	r2, #8
 80017b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f930 	bl	8001a1c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff f8cd 	bl	8000974 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00c      	beq.n	80017fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2210      	movs	r2, #16
 80017fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2208      	movs	r2, #8
 8001818:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f912 	bl	8001a44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f8f9 	bl	8001a30 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00b      	beq.n	8001860 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2210      	movs	r2, #16
 8001858:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8fc 	bl	8001a58 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2208      	movs	r2, #8
 800187a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f8f5 	bl	8001a6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d07b      	beq.n	8001984 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d072      	beq.n	800197c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d043      	beq.n	800197c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d03e      	beq.n	800197c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001904:	2b60      	cmp	r3, #96	; 0x60
 8001906:	d02b      	beq.n	8001960 <HAL_CAN_IRQHandler+0x32a>
 8001908:	2b60      	cmp	r3, #96	; 0x60
 800190a:	d82e      	bhi.n	800196a <HAL_CAN_IRQHandler+0x334>
 800190c:	2b50      	cmp	r3, #80	; 0x50
 800190e:	d022      	beq.n	8001956 <HAL_CAN_IRQHandler+0x320>
 8001910:	2b50      	cmp	r3, #80	; 0x50
 8001912:	d82a      	bhi.n	800196a <HAL_CAN_IRQHandler+0x334>
 8001914:	2b40      	cmp	r3, #64	; 0x40
 8001916:	d019      	beq.n	800194c <HAL_CAN_IRQHandler+0x316>
 8001918:	2b40      	cmp	r3, #64	; 0x40
 800191a:	d826      	bhi.n	800196a <HAL_CAN_IRQHandler+0x334>
 800191c:	2b30      	cmp	r3, #48	; 0x30
 800191e:	d010      	beq.n	8001942 <HAL_CAN_IRQHandler+0x30c>
 8001920:	2b30      	cmp	r3, #48	; 0x30
 8001922:	d822      	bhi.n	800196a <HAL_CAN_IRQHandler+0x334>
 8001924:	2b10      	cmp	r3, #16
 8001926:	d002      	beq.n	800192e <HAL_CAN_IRQHandler+0x2f8>
 8001928:	2b20      	cmp	r3, #32
 800192a:	d005      	beq.n	8001938 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800192c:	e01d      	b.n	800196a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001936:	e019      	b.n	800196c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001940:	e014      	b.n	800196c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f043 0320 	orr.w	r3, r3, #32
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800194a:	e00f      	b.n	800196c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001954:	e00a      	b.n	800196c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800195e:	e005      	b.n	800196c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001968:	e000      	b.n	800196c <HAL_CAN_IRQHandler+0x336>
            break;
 800196a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800197a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2204      	movs	r2, #4
 8001982:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f872 	bl	8001a80 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <__NVIC_EnableIRQ+0x38>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db0a      	blt.n	8001b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <__NVIC_SetPriority+0x4c>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b5c:	e00a      	b.n	8001b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <__NVIC_SetPriority+0x50>)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	440b      	add	r3, r1
 8001b72:	761a      	strb	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	bf28      	it	cs
 8001ba6:	2304      	movcs	r3, #4
 8001ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d902      	bls.n	8001bb8 <NVIC_EncodePriority+0x30>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b03      	subs	r3, #3
 8001bb6:	e000      	b.n	8001bba <NVIC_EncodePriority+0x32>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	4313      	orrs	r3, r2
         );
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f7ff ff8e 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff29 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff3e 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff8e 	bl	8001b88 <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff31 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa2 	bl	8001bf0 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e177      	b.n	8001fc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8166 	bne.w	8001fbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d005      	beq.n	8001d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d017      	beq.n	8001da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80c0 	beq.w	8001fbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a61      	ldr	r2, [pc, #388]	; (8001fe0 <HAL_GPIO_Init+0x328>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <HAL_GPIO_Init+0x32c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d037      	beq.n	8001ef6 <HAL_GPIO_Init+0x23e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a57      	ldr	r2, [pc, #348]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d031      	beq.n	8001ef2 <HAL_GPIO_Init+0x23a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a56      	ldr	r2, [pc, #344]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02b      	beq.n	8001eee <HAL_GPIO_Init+0x236>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a55      	ldr	r2, [pc, #340]	; (8001ff0 <HAL_GPIO_Init+0x338>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d025      	beq.n	8001eea <HAL_GPIO_Init+0x232>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a54      	ldr	r2, [pc, #336]	; (8001ff4 <HAL_GPIO_Init+0x33c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_GPIO_Init+0x22e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a53      	ldr	r2, [pc, #332]	; (8001ff8 <HAL_GPIO_Init+0x340>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d019      	beq.n	8001ee2 <HAL_GPIO_Init+0x22a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <HAL_GPIO_Init+0x344>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0x226>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	; (8002000 <HAL_GPIO_Init+0x348>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00d      	beq.n	8001eda <HAL_GPIO_Init+0x222>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a50      	ldr	r2, [pc, #320]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <HAL_GPIO_Init+0x21e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4f      	ldr	r2, [pc, #316]	; (8002008 <HAL_GPIO_Init+0x350>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d101      	bne.n	8001ed2 <HAL_GPIO_Init+0x21a>
 8001ece:	2309      	movs	r3, #9
 8001ed0:	e012      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	e010      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	e00e      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e00c      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ede:	2306      	movs	r3, #6
 8001ee0:	e00a      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	e008      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001eea:	2303      	movs	r3, #3
 8001eec:	e004      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f002 0203 	and.w	r2, r2, #3
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4093      	lsls	r3, r2
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f08:	4935      	ldr	r1, [pc, #212]	; (8001fe0 <HAL_GPIO_Init+0x328>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f3a:	4a34      	ldr	r2, [pc, #208]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f40:	4b32      	ldr	r3, [pc, #200]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f64:	4a29      	ldr	r2, [pc, #164]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f6a:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8e:	4a1f      	ldr	r2, [pc, #124]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_GPIO_Init+0x354>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	f67f ae84 	bls.w	8001cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020c00 	.word	0x40020c00
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40021400 	.word	0x40021400
 8001ffc:	40021800 	.word	0x40021800
 8002000:	40021c00 	.word	0x40021c00
 8002004:	40022000 	.word	0x40022000
 8002008:	40022400 	.word	0x40022400
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800202c:	e003      	b.n	8002036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	619a      	str	r2, [r3, #24]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002054:	887a      	ldrh	r2, [r7, #2]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	041a      	lsls	r2, r3, #16
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43d9      	mvns	r1, r3
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	400b      	ands	r3, r1
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e267      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d075      	beq.n	8002182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d00c      	beq.n	80020bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a2:	4b85      	ldr	r3, [pc, #532]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d112      	bne.n	80020d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ae:	4b82      	ldr	r3, [pc, #520]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ba:	d10b      	bne.n	80020d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	4b7e      	ldr	r3, [pc, #504]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d05b      	beq.n	8002180 <HAL_RCC_OscConfig+0x108>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d157      	bne.n	8002180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e242      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020dc:	d106      	bne.n	80020ec <HAL_RCC_OscConfig+0x74>
 80020de:	4b76      	ldr	r3, [pc, #472]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a75      	ldr	r2, [pc, #468]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e01d      	b.n	8002128 <HAL_RCC_OscConfig+0xb0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x98>
 80020f6:	4b70      	ldr	r3, [pc, #448]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a6f      	ldr	r2, [pc, #444]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80020fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b6d      	ldr	r3, [pc, #436]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6c      	ldr	r2, [pc, #432]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0xb0>
 8002110:	4b69      	ldr	r3, [pc, #420]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a68      	ldr	r2, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fe1e 	bl	8000d70 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002138:	f7fe fe1a 	bl	8000d70 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e207      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0xc0>
 8002156:	e014      	b.n	8002182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe fe0a 	bl	8000d70 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002160:	f7fe fe06 	bl	8000d70 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1f3      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0xe8>
 800217e:	e000      	b.n	8002182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d063      	beq.n	8002256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d11c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a6:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d116      	bne.n	80021e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_RCC_OscConfig+0x152>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e1c7      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4937      	ldr	r1, [pc, #220]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	e03a      	b.n	8002256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d020      	beq.n	800222a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e8:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_RCC_OscConfig+0x244>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe fdbf 	bl	8000d70 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f6:	f7fe fdbb 	bl	8000d70 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e1a8      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4925      	ldr	r1, [pc, #148]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
 8002228:	e015      	b.n	8002256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_OscConfig+0x244>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fd9e 	bl	8000d70 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002238:	f7fe fd9a 	bl	8000d70 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e187      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d036      	beq.n	80022d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d016      	beq.n	8002298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_RCC_OscConfig+0x248>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002270:	f7fe fd7e 	bl	8000d70 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002278:	f7fe fd7a 	bl	8000d70 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e167      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x240>)
 800228c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x200>
 8002296:	e01b      	b.n	80022d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_OscConfig+0x248>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7fe fd67 	bl	8000d70 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	e00e      	b.n	80022c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a6:	f7fe fd63 	bl	8000d70 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d907      	bls.n	80022c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e150      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
 80022b8:	40023800 	.word	0x40023800
 80022bc:	42470000 	.word	0x42470000
 80022c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	4b88      	ldr	r3, [pc, #544]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 80022c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ea      	bne.n	80022a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8097 	beq.w	800240c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e2:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10f      	bne.n	800230e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	4b7d      	ldr	r3, [pc, #500]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a7c      	ldr	r2, [pc, #496]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b7a      	ldr	r3, [pc, #488]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230a:	2301      	movs	r3, #1
 800230c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b77      	ldr	r3, [pc, #476]	; (80024ec <HAL_RCC_OscConfig+0x474>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d118      	bne.n	800234c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231a:	4b74      	ldr	r3, [pc, #464]	; (80024ec <HAL_RCC_OscConfig+0x474>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a73      	ldr	r2, [pc, #460]	; (80024ec <HAL_RCC_OscConfig+0x474>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002326:	f7fe fd23 	bl	8000d70 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7fe fd1f 	bl	8000d70 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e10c      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x474>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x2ea>
 8002354:	4b64      	ldr	r3, [pc, #400]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	4a63      	ldr	r2, [pc, #396]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6713      	str	r3, [r2, #112]	; 0x70
 8002360:	e01c      	b.n	800239c <HAL_RCC_OscConfig+0x324>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x30c>
 800236a:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a5e      	ldr	r2, [pc, #376]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
 8002376:	4b5c      	ldr	r3, [pc, #368]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a5b      	ldr	r2, [pc, #364]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0x324>
 8002384:	4b58      	ldr	r3, [pc, #352]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a57      	ldr	r2, [pc, #348]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	4b55      	ldr	r3, [pc, #340]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a54      	ldr	r2, [pc, #336]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002396:	f023 0304 	bic.w	r3, r3, #4
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7fe fce4 	bl	8000d70 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7fe fce0 	bl	8000d70 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0cb      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0ee      	beq.n	80023ac <HAL_RCC_OscConfig+0x334>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7fe fcce 	bl	8000d70 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7fe fcca 	bl	8000d70 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0b5      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ee:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ee      	bne.n	80023d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	4a38      	ldr	r2, [pc, #224]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a1 	beq.w	8002558 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002416:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b08      	cmp	r3, #8
 8002420:	d05c      	beq.n	80024dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d141      	bne.n	80024ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <HAL_RCC_OscConfig+0x478>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe fc9e 	bl	8000d70 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fc9a 	bl	8000d70 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e087      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	019b      	lsls	r3, r3, #6
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	085b      	lsrs	r3, r3, #1
 800246e:	3b01      	subs	r3, #1
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	491b      	ldr	r1, [pc, #108]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x478>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe fc73 	bl	8000d70 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe fc6f 	bl	8000d70 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e05c      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x416>
 80024ac:	e054      	b.n	8002558 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_RCC_OscConfig+0x478>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe fc5c 	bl	8000d70 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe fc58 	bl	8000d70 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e045      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_OscConfig+0x470>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x444>
 80024da:	e03d      	b.n	8002558 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e038      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40007000 	.word	0x40007000
 80024f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x4ec>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d028      	beq.n	8002554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d121      	bne.n	8002554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d11a      	bne.n	8002554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002524:	4013      	ands	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800252a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800252c:	4293      	cmp	r3, r2
 800252e:	d111      	bne.n	8002554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	3b01      	subs	r3, #1
 800253e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d107      	bne.n	8002554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800

08002568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0cc      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b68      	ldr	r3, [pc, #416]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d90c      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b65      	ldr	r3, [pc, #404]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b63      	ldr	r3, [pc, #396]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b8      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	494d      	ldr	r1, [pc, #308]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d044      	beq.n	8002688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d119      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e07f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d003      	beq.n	8002626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002622:	2b03      	cmp	r3, #3
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e06f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e067      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002646:	4b37      	ldr	r3, [pc, #220]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f023 0203 	bic.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4934      	ldr	r1, [pc, #208]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002658:	f7fe fb8a 	bl	8000d70 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	e00a      	b.n	8002676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7fe fb86 	bl	8000d70 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e04f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 020c 	and.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d1eb      	bne.n	8002660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d20c      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b22      	ldr	r3, [pc, #136]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e032      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4916      	ldr	r1, [pc, #88]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	490e      	ldr	r1, [pc, #56]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ee:	f000 f821 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	490a      	ldr	r1, [pc, #40]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe faea 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023c00 	.word	0x40023c00
 8002724:	40023800 	.word	0x40023800
 8002728:	08003a5c 	.word	0x08003a5c
 800272c:	20000000 	.word	0x20000000
 8002730:	20000004 	.word	0x20000004

08002734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002738:	b090      	sub	sp, #64	; 0x40
 800273a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
 8002740:	2300      	movs	r3, #0
 8002742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002744:	2300      	movs	r3, #0
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b08      	cmp	r3, #8
 8002756:	d00d      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x40>
 8002758:	2b08      	cmp	r3, #8
 800275a:	f200 80a1 	bhi.w	80028a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x34>
 8002762:	2b04      	cmp	r3, #4
 8002764:	d003      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0x3a>
 8002766:	e09b      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800276a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800276c:	e09b      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800276e:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_RCC_GetSysClockFreq+0x188>)
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002772:	e098      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002774:	4b4f      	ldr	r3, [pc, #316]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800277e:	4b4d      	ldr	r3, [pc, #308]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d028      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278a:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	099b      	lsrs	r3, r3, #6
 8002790:	2200      	movs	r2, #0
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	627a      	str	r2, [r7, #36]	; 0x24
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800279c:	2100      	movs	r1, #0
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_GetSysClockFreq+0x188>)
 80027a0:	fb03 f201 	mul.w	r2, r3, r1
 80027a4:	2300      	movs	r3, #0
 80027a6:	fb00 f303 	mul.w	r3, r0, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	4a43      	ldr	r2, [pc, #268]	; (80028bc <HAL_RCC_GetSysClockFreq+0x188>)
 80027ae:	fba0 1202 	umull	r1, r2, r0, r2
 80027b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027b4:	460a      	mov	r2, r1
 80027b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80027b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ba:	4413      	add	r3, r2
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c0:	2200      	movs	r2, #0
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	61fa      	str	r2, [r7, #28]
 80027c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027ce:	f7fd fd67 	bl	80002a0 <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4613      	mov	r3, r2
 80027d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027da:	e053      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	2200      	movs	r2, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	617a      	str	r2, [r7, #20]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027ee:	f04f 0b00 	mov.w	fp, #0
 80027f2:	4652      	mov	r2, sl
 80027f4:	465b      	mov	r3, fp
 80027f6:	f04f 0000 	mov.w	r0, #0
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	0159      	lsls	r1, r3, #5
 8002800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002804:	0150      	lsls	r0, r2, #5
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	ebb2 080a 	subs.w	r8, r2, sl
 800280e:	eb63 090b 	sbc.w	r9, r3, fp
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800281e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002822:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002826:	ebb2 0408 	subs.w	r4, r2, r8
 800282a:	eb63 0509 	sbc.w	r5, r3, r9
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	00eb      	lsls	r3, r5, #3
 8002838:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800283c:	00e2      	lsls	r2, r4, #3
 800283e:	4614      	mov	r4, r2
 8002840:	461d      	mov	r5, r3
 8002842:	eb14 030a 	adds.w	r3, r4, sl
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	eb45 030b 	adc.w	r3, r5, fp
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800285a:	4629      	mov	r1, r5
 800285c:	028b      	lsls	r3, r1, #10
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002864:	4621      	mov	r1, r4
 8002866:	028a      	lsls	r2, r1, #10
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	2200      	movs	r2, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	60fa      	str	r2, [r7, #12]
 8002874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002878:	f7fd fd12 	bl	80002a0 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	3301      	adds	r3, #1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3740      	adds	r7, #64	; 0x40
 80028ac:	46bd      	mov	sp, r7
 80028ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
 80028b8:	00f42400 	.word	0x00f42400
 80028bc:	017d7840 	.word	0x017d7840

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0a9b      	lsrs	r3, r3, #10
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08003a6c 	.word	0x08003a6c

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002904:	f7ff ffdc 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0b5b      	lsrs	r3, r3, #13
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	08003a6c 	.word	0x08003a6c

08002928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e03f      	b.n	80029ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe f8ba 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800296a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f929 	bl	8002bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b08a      	sub	sp, #40	; 0x28
 80029c6:	af02      	add	r7, sp, #8
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d17c      	bne.n	8002adc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_UART_Transmit+0x2c>
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e075      	b.n	8002ade <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_UART_Transmit+0x3e>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e06e      	b.n	8002ade <HAL_UART_Transmit+0x11c>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2221      	movs	r2, #33	; 0x21
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a16:	f7fe f9ab 	bl	8000d70 <HAL_GetTick>
 8002a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	88fa      	ldrh	r2, [r7, #6]
 8002a26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	d108      	bne.n	8002a44 <HAL_UART_Transmit+0x82>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	e003      	b.n	8002a4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a54:	e02a      	b.n	8002aac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f840 	bl	8002ae6 <UART_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e036      	b.n	8002ade <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	e007      	b.n	8002a9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1cf      	bne.n	8002a56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2140      	movs	r1, #64	; 0x40
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f810 	bl	8002ae6 <UART_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e006      	b.n	8002ade <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b090      	sub	sp, #64	; 0x40
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af6:	e050      	b.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d04c      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b06:	f7fe f933 	bl	8000d70 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d241      	bcs.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b36:	637a      	str	r2, [r7, #52]	; 0x34
 8002b38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e5      	bne.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	613b      	str	r3, [r7, #16]
   return(result);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3314      	adds	r3, #20
 8002b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b6a:	623a      	str	r2, [r7, #32]
 8002b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	69f9      	ldr	r1, [r7, #28]
 8002b70:	6a3a      	ldr	r2, [r7, #32]
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e5      	bne.n	8002b4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e00f      	b.n	8002bba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d09f      	beq.n	8002af8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3740      	adds	r7, #64	; 0x40
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc8:	b0c0      	sub	sp, #256	; 0x100
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	68d9      	ldr	r1, [r3, #12]
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	ea40 0301 	orr.w	r3, r0, r1
 8002bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c1c:	f021 010c 	bic.w	r1, r1, #12
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3e:	6999      	ldr	r1, [r3, #24]
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	ea40 0301 	orr.w	r3, r0, r1
 8002c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b8f      	ldr	r3, [pc, #572]	; (8002e90 <UART_SetConfig+0x2cc>)
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d005      	beq.n	8002c64 <UART_SetConfig+0xa0>
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b8d      	ldr	r3, [pc, #564]	; (8002e94 <UART_SetConfig+0x2d0>)
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d104      	bne.n	8002c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c64:	f7ff fe4c 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8002c68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c6c:	e003      	b.n	8002c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c6e:	f7ff fe33 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8002c72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c80:	f040 810c 	bne.w	8002e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	1891      	adds	r1, r2, r2
 8002c9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c9e:	415b      	adcs	r3, r3
 8002ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	eb12 0801 	adds.w	r8, r2, r1
 8002cac:	4629      	mov	r1, r5
 8002cae:	eb43 0901 	adc.w	r9, r3, r1
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc6:	4690      	mov	r8, r2
 8002cc8:	4699      	mov	r9, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	eb18 0303 	adds.w	r3, r8, r3
 8002cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	eb49 0303 	adc.w	r3, r9, r3
 8002cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	18db      	adds	r3, r3, r3
 8002cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	eb42 0303 	adc.w	r3, r2, r3
 8002cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8002d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d08:	f7fd faca 	bl	80002a0 <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002d12:	fba3 2302 	umull	r2, r3, r3, r2
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	011c      	lsls	r4, r3, #4
 8002d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	1891      	adds	r1, r2, r2
 8002d32:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d34:	415b      	adcs	r3, r3
 8002d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d42:	4649      	mov	r1, r9
 8002d44:	eb43 0b01 	adc.w	fp, r3, r1
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d5c:	4692      	mov	sl, r2
 8002d5e:	469b      	mov	fp, r3
 8002d60:	4643      	mov	r3, r8
 8002d62:	eb1a 0303 	adds.w	r3, sl, r3
 8002d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	18db      	adds	r3, r3, r3
 8002d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d8e:	4613      	mov	r3, r2
 8002d90:	eb42 0303 	adc.w	r3, r2, r3
 8002d94:	647b      	str	r3, [r7, #68]	; 0x44
 8002d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d9e:	f7fd fa7f 	bl	80002a0 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002daa:	fba3 2301 	umull	r2, r3, r3, r1
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2264      	movs	r2, #100	; 0x64
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	1acb      	subs	r3, r1, r3
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dbe:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dcc:	441c      	add	r4, r3
 8002dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002de0:	4642      	mov	r2, r8
 8002de2:	464b      	mov	r3, r9
 8002de4:	1891      	adds	r1, r2, r2
 8002de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002de8:	415b      	adcs	r3, r3
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002df0:	4641      	mov	r1, r8
 8002df2:	1851      	adds	r1, r2, r1
 8002df4:	6339      	str	r1, [r7, #48]	; 0x30
 8002df6:	4649      	mov	r1, r9
 8002df8:	414b      	adcs	r3, r1
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e08:	4659      	mov	r1, fp
 8002e0a:	00cb      	lsls	r3, r1, #3
 8002e0c:	4651      	mov	r1, sl
 8002e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e12:	4651      	mov	r1, sl
 8002e14:	00ca      	lsls	r2, r1, #3
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	189b      	adds	r3, r3, r2
 8002e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e24:	464b      	mov	r3, r9
 8002e26:	460a      	mov	r2, r1
 8002e28:	eb42 0303 	adc.w	r3, r2, r3
 8002e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e44:	460b      	mov	r3, r1
 8002e46:	18db      	adds	r3, r3, r3
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e5a:	f7fd fa21 	bl	80002a0 <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002e64:	fba3 1302 	umull	r1, r3, r3, r2
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	2164      	movs	r1, #100	; 0x64
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	3332      	adds	r3, #50	; 0x32
 8002e76:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	f003 0207 	and.w	r2, r3, #7
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4422      	add	r2, r4
 8002e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e8c:	e106      	b.n	800309c <UART_SetConfig+0x4d8>
 8002e8e:	bf00      	nop
 8002e90:	40011000 	.word	0x40011000
 8002e94:	40011400 	.word	0x40011400
 8002e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002eae:	4642      	mov	r2, r8
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	1891      	adds	r1, r2, r2
 8002eb4:	6239      	str	r1, [r7, #32]
 8002eb6:	415b      	adcs	r3, r3
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	1854      	adds	r4, r2, r1
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	eb43 0501 	adc.w	r5, r3, r1
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	00eb      	lsls	r3, r5, #3
 8002ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ed6:	00e2      	lsls	r2, r4, #3
 8002ed8:	4614      	mov	r4, r2
 8002eda:	461d      	mov	r5, r3
 8002edc:	4643      	mov	r3, r8
 8002ede:	18e3      	adds	r3, r4, r3
 8002ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	eb45 0303 	adc.w	r3, r5, r3
 8002eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	008b      	lsls	r3, r1, #2
 8002f0e:	4621      	mov	r1, r4
 8002f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f14:	4621      	mov	r1, r4
 8002f16:	008a      	lsls	r2, r1, #2
 8002f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f1c:	f7fd f9c0 	bl	80002a0 <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4b60      	ldr	r3, [pc, #384]	; (80030a8 <UART_SetConfig+0x4e4>)
 8002f26:	fba3 2302 	umull	r2, r3, r3, r2
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	011c      	lsls	r4, r3, #4
 8002f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f40:	4642      	mov	r2, r8
 8002f42:	464b      	mov	r3, r9
 8002f44:	1891      	adds	r1, r2, r2
 8002f46:	61b9      	str	r1, [r7, #24]
 8002f48:	415b      	adcs	r3, r3
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f50:	4641      	mov	r1, r8
 8002f52:	1851      	adds	r1, r2, r1
 8002f54:	6139      	str	r1, [r7, #16]
 8002f56:	4649      	mov	r1, r9
 8002f58:	414b      	adcs	r3, r1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f68:	4659      	mov	r1, fp
 8002f6a:	00cb      	lsls	r3, r1, #3
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f72:	4651      	mov	r1, sl
 8002f74:	00ca      	lsls	r2, r1, #3
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f84:	464b      	mov	r3, r9
 8002f86:	460a      	mov	r2, r1
 8002f88:	eb42 0303 	adc.w	r3, r2, r3
 8002f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fa8:	4649      	mov	r1, r9
 8002faa:	008b      	lsls	r3, r1, #2
 8002fac:	4641      	mov	r1, r8
 8002fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	008a      	lsls	r2, r1, #2
 8002fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fba:	f7fd f971 	bl	80002a0 <__aeabi_uldivmod>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <UART_SetConfig+0x4e4>)
 8002fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2264      	movs	r2, #100	; 0x64
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	1acb      	subs	r3, r1, r3
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	3332      	adds	r3, #50	; 0x32
 8002fd8:	4a33      	ldr	r2, [pc, #204]	; (80030a8 <UART_SetConfig+0x4e4>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe4:	441c      	add	r4, r3
 8002fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fea:	2200      	movs	r2, #0
 8002fec:	673b      	str	r3, [r7, #112]	; 0x70
 8002fee:	677a      	str	r2, [r7, #116]	; 0x74
 8002ff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	1891      	adds	r1, r2, r2
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	415b      	adcs	r3, r3
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003004:	4641      	mov	r1, r8
 8003006:	1851      	adds	r1, r2, r1
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	4649      	mov	r1, r9
 800300c:	414b      	adcs	r3, r1
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800301c:	4659      	mov	r1, fp
 800301e:	00cb      	lsls	r3, r1, #3
 8003020:	4651      	mov	r1, sl
 8003022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003026:	4651      	mov	r1, sl
 8003028:	00ca      	lsls	r2, r1, #3
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	4603      	mov	r3, r0
 8003030:	4642      	mov	r2, r8
 8003032:	189b      	adds	r3, r3, r2
 8003034:	66bb      	str	r3, [r7, #104]	; 0x68
 8003036:	464b      	mov	r3, r9
 8003038:	460a      	mov	r2, r1
 800303a:	eb42 0303 	adc.w	r3, r2, r3
 800303e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	663b      	str	r3, [r7, #96]	; 0x60
 800304a:	667a      	str	r2, [r7, #100]	; 0x64
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003058:	4649      	mov	r1, r9
 800305a:	008b      	lsls	r3, r1, #2
 800305c:	4641      	mov	r1, r8
 800305e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003062:	4641      	mov	r1, r8
 8003064:	008a      	lsls	r2, r1, #2
 8003066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800306a:	f7fd f919 	bl	80002a0 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <UART_SetConfig+0x4e4>)
 8003074:	fba3 1302 	umull	r1, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	2164      	movs	r1, #100	; 0x64
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	3332      	adds	r3, #50	; 0x32
 8003086:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <UART_SetConfig+0x4e4>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	f003 020f 	and.w	r2, r3, #15
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4422      	add	r2, r4
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030a2:	46bd      	mov	sp, r7
 80030a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a8:	51eb851f 	.word	0x51eb851f

080030ac <sniprintf>:
 80030ac:	b40c      	push	{r2, r3}
 80030ae:	b530      	push	{r4, r5, lr}
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <sniprintf+0x64>)
 80030b2:	1e0c      	subs	r4, r1, #0
 80030b4:	681d      	ldr	r5, [r3, #0]
 80030b6:	b09d      	sub	sp, #116	; 0x74
 80030b8:	da08      	bge.n	80030cc <sniprintf+0x20>
 80030ba:	238b      	movs	r3, #139	; 0x8b
 80030bc:	602b      	str	r3, [r5, #0]
 80030be:	f04f 30ff 	mov.w	r0, #4294967295
 80030c2:	b01d      	add	sp, #116	; 0x74
 80030c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030c8:	b002      	add	sp, #8
 80030ca:	4770      	bx	lr
 80030cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80030d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80030d4:	bf14      	ite	ne
 80030d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80030da:	4623      	moveq	r3, r4
 80030dc:	9304      	str	r3, [sp, #16]
 80030de:	9307      	str	r3, [sp, #28]
 80030e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e4:	9002      	str	r0, [sp, #8]
 80030e6:	9006      	str	r0, [sp, #24]
 80030e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80030ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80030ee:	ab21      	add	r3, sp, #132	; 0x84
 80030f0:	a902      	add	r1, sp, #8
 80030f2:	4628      	mov	r0, r5
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	f000 f993 	bl	8003420 <_svfiprintf_r>
 80030fa:	1c43      	adds	r3, r0, #1
 80030fc:	bfbc      	itt	lt
 80030fe:	238b      	movlt	r3, #139	; 0x8b
 8003100:	602b      	strlt	r3, [r5, #0]
 8003102:	2c00      	cmp	r4, #0
 8003104:	d0dd      	beq.n	80030c2 <sniprintf+0x16>
 8003106:	9b02      	ldr	r3, [sp, #8]
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e7d9      	b.n	80030c2 <sniprintf+0x16>
 800310e:	bf00      	nop
 8003110:	20000058 	.word	0x20000058

08003114 <memset>:
 8003114:	4402      	add	r2, r0
 8003116:	4603      	mov	r3, r0
 8003118:	4293      	cmp	r3, r2
 800311a:	d100      	bne.n	800311e <memset+0xa>
 800311c:	4770      	bx	lr
 800311e:	f803 1b01 	strb.w	r1, [r3], #1
 8003122:	e7f9      	b.n	8003118 <memset+0x4>

08003124 <__errno>:
 8003124:	4b01      	ldr	r3, [pc, #4]	; (800312c <__errno+0x8>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000058 	.word	0x20000058

08003130 <__libc_init_array>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	4d0d      	ldr	r5, [pc, #52]	; (8003168 <__libc_init_array+0x38>)
 8003134:	4c0d      	ldr	r4, [pc, #52]	; (800316c <__libc_init_array+0x3c>)
 8003136:	1b64      	subs	r4, r4, r5
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	2600      	movs	r6, #0
 800313c:	42a6      	cmp	r6, r4
 800313e:	d109      	bne.n	8003154 <__libc_init_array+0x24>
 8003140:	4d0b      	ldr	r5, [pc, #44]	; (8003170 <__libc_init_array+0x40>)
 8003142:	4c0c      	ldr	r4, [pc, #48]	; (8003174 <__libc_init_array+0x44>)
 8003144:	f000 fc6a 	bl	8003a1c <_init>
 8003148:	1b64      	subs	r4, r4, r5
 800314a:	10a4      	asrs	r4, r4, #2
 800314c:	2600      	movs	r6, #0
 800314e:	42a6      	cmp	r6, r4
 8003150:	d105      	bne.n	800315e <__libc_init_array+0x2e>
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	f855 3b04 	ldr.w	r3, [r5], #4
 8003158:	4798      	blx	r3
 800315a:	3601      	adds	r6, #1
 800315c:	e7ee      	b.n	800313c <__libc_init_array+0xc>
 800315e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003162:	4798      	blx	r3
 8003164:	3601      	adds	r6, #1
 8003166:	e7f2      	b.n	800314e <__libc_init_array+0x1e>
 8003168:	08003ab0 	.word	0x08003ab0
 800316c:	08003ab0 	.word	0x08003ab0
 8003170:	08003ab0 	.word	0x08003ab0
 8003174:	08003ab4 	.word	0x08003ab4

08003178 <__retarget_lock_acquire_recursive>:
 8003178:	4770      	bx	lr

0800317a <__retarget_lock_release_recursive>:
 800317a:	4770      	bx	lr

0800317c <_free_r>:
 800317c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800317e:	2900      	cmp	r1, #0
 8003180:	d044      	beq.n	800320c <_free_r+0x90>
 8003182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003186:	9001      	str	r0, [sp, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	f1a1 0404 	sub.w	r4, r1, #4
 800318e:	bfb8      	it	lt
 8003190:	18e4      	addlt	r4, r4, r3
 8003192:	f000 f8df 	bl	8003354 <__malloc_lock>
 8003196:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <_free_r+0x94>)
 8003198:	9801      	ldr	r0, [sp, #4]
 800319a:	6813      	ldr	r3, [r2, #0]
 800319c:	b933      	cbnz	r3, 80031ac <_free_r+0x30>
 800319e:	6063      	str	r3, [r4, #4]
 80031a0:	6014      	str	r4, [r2, #0]
 80031a2:	b003      	add	sp, #12
 80031a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031a8:	f000 b8da 	b.w	8003360 <__malloc_unlock>
 80031ac:	42a3      	cmp	r3, r4
 80031ae:	d908      	bls.n	80031c2 <_free_r+0x46>
 80031b0:	6825      	ldr	r5, [r4, #0]
 80031b2:	1961      	adds	r1, r4, r5
 80031b4:	428b      	cmp	r3, r1
 80031b6:	bf01      	itttt	eq
 80031b8:	6819      	ldreq	r1, [r3, #0]
 80031ba:	685b      	ldreq	r3, [r3, #4]
 80031bc:	1949      	addeq	r1, r1, r5
 80031be:	6021      	streq	r1, [r4, #0]
 80031c0:	e7ed      	b.n	800319e <_free_r+0x22>
 80031c2:	461a      	mov	r2, r3
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	b10b      	cbz	r3, 80031cc <_free_r+0x50>
 80031c8:	42a3      	cmp	r3, r4
 80031ca:	d9fa      	bls.n	80031c2 <_free_r+0x46>
 80031cc:	6811      	ldr	r1, [r2, #0]
 80031ce:	1855      	adds	r5, r2, r1
 80031d0:	42a5      	cmp	r5, r4
 80031d2:	d10b      	bne.n	80031ec <_free_r+0x70>
 80031d4:	6824      	ldr	r4, [r4, #0]
 80031d6:	4421      	add	r1, r4
 80031d8:	1854      	adds	r4, r2, r1
 80031da:	42a3      	cmp	r3, r4
 80031dc:	6011      	str	r1, [r2, #0]
 80031de:	d1e0      	bne.n	80031a2 <_free_r+0x26>
 80031e0:	681c      	ldr	r4, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	6053      	str	r3, [r2, #4]
 80031e6:	440c      	add	r4, r1
 80031e8:	6014      	str	r4, [r2, #0]
 80031ea:	e7da      	b.n	80031a2 <_free_r+0x26>
 80031ec:	d902      	bls.n	80031f4 <_free_r+0x78>
 80031ee:	230c      	movs	r3, #12
 80031f0:	6003      	str	r3, [r0, #0]
 80031f2:	e7d6      	b.n	80031a2 <_free_r+0x26>
 80031f4:	6825      	ldr	r5, [r4, #0]
 80031f6:	1961      	adds	r1, r4, r5
 80031f8:	428b      	cmp	r3, r1
 80031fa:	bf04      	itt	eq
 80031fc:	6819      	ldreq	r1, [r3, #0]
 80031fe:	685b      	ldreq	r3, [r3, #4]
 8003200:	6063      	str	r3, [r4, #4]
 8003202:	bf04      	itt	eq
 8003204:	1949      	addeq	r1, r1, r5
 8003206:	6021      	streq	r1, [r4, #0]
 8003208:	6054      	str	r4, [r2, #4]
 800320a:	e7ca      	b.n	80031a2 <_free_r+0x26>
 800320c:	b003      	add	sp, #12
 800320e:	bd30      	pop	{r4, r5, pc}
 8003210:	20000298 	.word	0x20000298

08003214 <sbrk_aligned>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	4e0e      	ldr	r6, [pc, #56]	; (8003250 <sbrk_aligned+0x3c>)
 8003218:	460c      	mov	r4, r1
 800321a:	6831      	ldr	r1, [r6, #0]
 800321c:	4605      	mov	r5, r0
 800321e:	b911      	cbnz	r1, 8003226 <sbrk_aligned+0x12>
 8003220:	f000 fba6 	bl	8003970 <_sbrk_r>
 8003224:	6030      	str	r0, [r6, #0]
 8003226:	4621      	mov	r1, r4
 8003228:	4628      	mov	r0, r5
 800322a:	f000 fba1 	bl	8003970 <_sbrk_r>
 800322e:	1c43      	adds	r3, r0, #1
 8003230:	d00a      	beq.n	8003248 <sbrk_aligned+0x34>
 8003232:	1cc4      	adds	r4, r0, #3
 8003234:	f024 0403 	bic.w	r4, r4, #3
 8003238:	42a0      	cmp	r0, r4
 800323a:	d007      	beq.n	800324c <sbrk_aligned+0x38>
 800323c:	1a21      	subs	r1, r4, r0
 800323e:	4628      	mov	r0, r5
 8003240:	f000 fb96 	bl	8003970 <_sbrk_r>
 8003244:	3001      	adds	r0, #1
 8003246:	d101      	bne.n	800324c <sbrk_aligned+0x38>
 8003248:	f04f 34ff 	mov.w	r4, #4294967295
 800324c:	4620      	mov	r0, r4
 800324e:	bd70      	pop	{r4, r5, r6, pc}
 8003250:	2000029c 	.word	0x2000029c

08003254 <_malloc_r>:
 8003254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003258:	1ccd      	adds	r5, r1, #3
 800325a:	f025 0503 	bic.w	r5, r5, #3
 800325e:	3508      	adds	r5, #8
 8003260:	2d0c      	cmp	r5, #12
 8003262:	bf38      	it	cc
 8003264:	250c      	movcc	r5, #12
 8003266:	2d00      	cmp	r5, #0
 8003268:	4607      	mov	r7, r0
 800326a:	db01      	blt.n	8003270 <_malloc_r+0x1c>
 800326c:	42a9      	cmp	r1, r5
 800326e:	d905      	bls.n	800327c <_malloc_r+0x28>
 8003270:	230c      	movs	r3, #12
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	2600      	movs	r6, #0
 8003276:	4630      	mov	r0, r6
 8003278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800327c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003350 <_malloc_r+0xfc>
 8003280:	f000 f868 	bl	8003354 <__malloc_lock>
 8003284:	f8d8 3000 	ldr.w	r3, [r8]
 8003288:	461c      	mov	r4, r3
 800328a:	bb5c      	cbnz	r4, 80032e4 <_malloc_r+0x90>
 800328c:	4629      	mov	r1, r5
 800328e:	4638      	mov	r0, r7
 8003290:	f7ff ffc0 	bl	8003214 <sbrk_aligned>
 8003294:	1c43      	adds	r3, r0, #1
 8003296:	4604      	mov	r4, r0
 8003298:	d155      	bne.n	8003346 <_malloc_r+0xf2>
 800329a:	f8d8 4000 	ldr.w	r4, [r8]
 800329e:	4626      	mov	r6, r4
 80032a0:	2e00      	cmp	r6, #0
 80032a2:	d145      	bne.n	8003330 <_malloc_r+0xdc>
 80032a4:	2c00      	cmp	r4, #0
 80032a6:	d048      	beq.n	800333a <_malloc_r+0xe6>
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	4631      	mov	r1, r6
 80032ac:	4638      	mov	r0, r7
 80032ae:	eb04 0903 	add.w	r9, r4, r3
 80032b2:	f000 fb5d 	bl	8003970 <_sbrk_r>
 80032b6:	4581      	cmp	r9, r0
 80032b8:	d13f      	bne.n	800333a <_malloc_r+0xe6>
 80032ba:	6821      	ldr	r1, [r4, #0]
 80032bc:	1a6d      	subs	r5, r5, r1
 80032be:	4629      	mov	r1, r5
 80032c0:	4638      	mov	r0, r7
 80032c2:	f7ff ffa7 	bl	8003214 <sbrk_aligned>
 80032c6:	3001      	adds	r0, #1
 80032c8:	d037      	beq.n	800333a <_malloc_r+0xe6>
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	442b      	add	r3, r5
 80032ce:	6023      	str	r3, [r4, #0]
 80032d0:	f8d8 3000 	ldr.w	r3, [r8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d038      	beq.n	800334a <_malloc_r+0xf6>
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	42a2      	cmp	r2, r4
 80032dc:	d12b      	bne.n	8003336 <_malloc_r+0xe2>
 80032de:	2200      	movs	r2, #0
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	e00f      	b.n	8003304 <_malloc_r+0xb0>
 80032e4:	6822      	ldr	r2, [r4, #0]
 80032e6:	1b52      	subs	r2, r2, r5
 80032e8:	d41f      	bmi.n	800332a <_malloc_r+0xd6>
 80032ea:	2a0b      	cmp	r2, #11
 80032ec:	d917      	bls.n	800331e <_malloc_r+0xca>
 80032ee:	1961      	adds	r1, r4, r5
 80032f0:	42a3      	cmp	r3, r4
 80032f2:	6025      	str	r5, [r4, #0]
 80032f4:	bf18      	it	ne
 80032f6:	6059      	strne	r1, [r3, #4]
 80032f8:	6863      	ldr	r3, [r4, #4]
 80032fa:	bf08      	it	eq
 80032fc:	f8c8 1000 	streq.w	r1, [r8]
 8003300:	5162      	str	r2, [r4, r5]
 8003302:	604b      	str	r3, [r1, #4]
 8003304:	4638      	mov	r0, r7
 8003306:	f104 060b 	add.w	r6, r4, #11
 800330a:	f000 f829 	bl	8003360 <__malloc_unlock>
 800330e:	f026 0607 	bic.w	r6, r6, #7
 8003312:	1d23      	adds	r3, r4, #4
 8003314:	1af2      	subs	r2, r6, r3
 8003316:	d0ae      	beq.n	8003276 <_malloc_r+0x22>
 8003318:	1b9b      	subs	r3, r3, r6
 800331a:	50a3      	str	r3, [r4, r2]
 800331c:	e7ab      	b.n	8003276 <_malloc_r+0x22>
 800331e:	42a3      	cmp	r3, r4
 8003320:	6862      	ldr	r2, [r4, #4]
 8003322:	d1dd      	bne.n	80032e0 <_malloc_r+0x8c>
 8003324:	f8c8 2000 	str.w	r2, [r8]
 8003328:	e7ec      	b.n	8003304 <_malloc_r+0xb0>
 800332a:	4623      	mov	r3, r4
 800332c:	6864      	ldr	r4, [r4, #4]
 800332e:	e7ac      	b.n	800328a <_malloc_r+0x36>
 8003330:	4634      	mov	r4, r6
 8003332:	6876      	ldr	r6, [r6, #4]
 8003334:	e7b4      	b.n	80032a0 <_malloc_r+0x4c>
 8003336:	4613      	mov	r3, r2
 8003338:	e7cc      	b.n	80032d4 <_malloc_r+0x80>
 800333a:	230c      	movs	r3, #12
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	4638      	mov	r0, r7
 8003340:	f000 f80e 	bl	8003360 <__malloc_unlock>
 8003344:	e797      	b.n	8003276 <_malloc_r+0x22>
 8003346:	6025      	str	r5, [r4, #0]
 8003348:	e7dc      	b.n	8003304 <_malloc_r+0xb0>
 800334a:	605b      	str	r3, [r3, #4]
 800334c:	deff      	udf	#255	; 0xff
 800334e:	bf00      	nop
 8003350:	20000298 	.word	0x20000298

08003354 <__malloc_lock>:
 8003354:	4801      	ldr	r0, [pc, #4]	; (800335c <__malloc_lock+0x8>)
 8003356:	f7ff bf0f 	b.w	8003178 <__retarget_lock_acquire_recursive>
 800335a:	bf00      	nop
 800335c:	20000294 	.word	0x20000294

08003360 <__malloc_unlock>:
 8003360:	4801      	ldr	r0, [pc, #4]	; (8003368 <__malloc_unlock+0x8>)
 8003362:	f7ff bf0a 	b.w	800317a <__retarget_lock_release_recursive>
 8003366:	bf00      	nop
 8003368:	20000294 	.word	0x20000294

0800336c <__ssputs_r>:
 800336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003370:	688e      	ldr	r6, [r1, #8]
 8003372:	461f      	mov	r7, r3
 8003374:	42be      	cmp	r6, r7
 8003376:	680b      	ldr	r3, [r1, #0]
 8003378:	4682      	mov	sl, r0
 800337a:	460c      	mov	r4, r1
 800337c:	4690      	mov	r8, r2
 800337e:	d82c      	bhi.n	80033da <__ssputs_r+0x6e>
 8003380:	898a      	ldrh	r2, [r1, #12]
 8003382:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003386:	d026      	beq.n	80033d6 <__ssputs_r+0x6a>
 8003388:	6965      	ldr	r5, [r4, #20]
 800338a:	6909      	ldr	r1, [r1, #16]
 800338c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003390:	eba3 0901 	sub.w	r9, r3, r1
 8003394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003398:	1c7b      	adds	r3, r7, #1
 800339a:	444b      	add	r3, r9
 800339c:	106d      	asrs	r5, r5, #1
 800339e:	429d      	cmp	r5, r3
 80033a0:	bf38      	it	cc
 80033a2:	461d      	movcc	r5, r3
 80033a4:	0553      	lsls	r3, r2, #21
 80033a6:	d527      	bpl.n	80033f8 <__ssputs_r+0x8c>
 80033a8:	4629      	mov	r1, r5
 80033aa:	f7ff ff53 	bl	8003254 <_malloc_r>
 80033ae:	4606      	mov	r6, r0
 80033b0:	b360      	cbz	r0, 800340c <__ssputs_r+0xa0>
 80033b2:	6921      	ldr	r1, [r4, #16]
 80033b4:	464a      	mov	r2, r9
 80033b6:	f000 faeb 	bl	8003990 <memcpy>
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	6126      	str	r6, [r4, #16]
 80033c8:	6165      	str	r5, [r4, #20]
 80033ca:	444e      	add	r6, r9
 80033cc:	eba5 0509 	sub.w	r5, r5, r9
 80033d0:	6026      	str	r6, [r4, #0]
 80033d2:	60a5      	str	r5, [r4, #8]
 80033d4:	463e      	mov	r6, r7
 80033d6:	42be      	cmp	r6, r7
 80033d8:	d900      	bls.n	80033dc <__ssputs_r+0x70>
 80033da:	463e      	mov	r6, r7
 80033dc:	6820      	ldr	r0, [r4, #0]
 80033de:	4632      	mov	r2, r6
 80033e0:	4641      	mov	r1, r8
 80033e2:	f000 faab 	bl	800393c <memmove>
 80033e6:	68a3      	ldr	r3, [r4, #8]
 80033e8:	1b9b      	subs	r3, r3, r6
 80033ea:	60a3      	str	r3, [r4, #8]
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	4433      	add	r3, r6
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	2000      	movs	r0, #0
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	462a      	mov	r2, r5
 80033fa:	f000 fad7 	bl	80039ac <_realloc_r>
 80033fe:	4606      	mov	r6, r0
 8003400:	2800      	cmp	r0, #0
 8003402:	d1e0      	bne.n	80033c6 <__ssputs_r+0x5a>
 8003404:	6921      	ldr	r1, [r4, #16]
 8003406:	4650      	mov	r0, sl
 8003408:	f7ff feb8 	bl	800317c <_free_r>
 800340c:	230c      	movs	r3, #12
 800340e:	f8ca 3000 	str.w	r3, [sl]
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	f04f 30ff 	mov.w	r0, #4294967295
 800341e:	e7e9      	b.n	80033f4 <__ssputs_r+0x88>

08003420 <_svfiprintf_r>:
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	4698      	mov	r8, r3
 8003426:	898b      	ldrh	r3, [r1, #12]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	b09d      	sub	sp, #116	; 0x74
 800342c:	4607      	mov	r7, r0
 800342e:	460d      	mov	r5, r1
 8003430:	4614      	mov	r4, r2
 8003432:	d50e      	bpl.n	8003452 <_svfiprintf_r+0x32>
 8003434:	690b      	ldr	r3, [r1, #16]
 8003436:	b963      	cbnz	r3, 8003452 <_svfiprintf_r+0x32>
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	f7ff ff0b 	bl	8003254 <_malloc_r>
 800343e:	6028      	str	r0, [r5, #0]
 8003440:	6128      	str	r0, [r5, #16]
 8003442:	b920      	cbnz	r0, 800344e <_svfiprintf_r+0x2e>
 8003444:	230c      	movs	r3, #12
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	e0d0      	b.n	80035f0 <_svfiprintf_r+0x1d0>
 800344e:	2340      	movs	r3, #64	; 0x40
 8003450:	616b      	str	r3, [r5, #20]
 8003452:	2300      	movs	r3, #0
 8003454:	9309      	str	r3, [sp, #36]	; 0x24
 8003456:	2320      	movs	r3, #32
 8003458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800345c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003460:	2330      	movs	r3, #48	; 0x30
 8003462:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003608 <_svfiprintf_r+0x1e8>
 8003466:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800346a:	f04f 0901 	mov.w	r9, #1
 800346e:	4623      	mov	r3, r4
 8003470:	469a      	mov	sl, r3
 8003472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003476:	b10a      	cbz	r2, 800347c <_svfiprintf_r+0x5c>
 8003478:	2a25      	cmp	r2, #37	; 0x25
 800347a:	d1f9      	bne.n	8003470 <_svfiprintf_r+0x50>
 800347c:	ebba 0b04 	subs.w	fp, sl, r4
 8003480:	d00b      	beq.n	800349a <_svfiprintf_r+0x7a>
 8003482:	465b      	mov	r3, fp
 8003484:	4622      	mov	r2, r4
 8003486:	4629      	mov	r1, r5
 8003488:	4638      	mov	r0, r7
 800348a:	f7ff ff6f 	bl	800336c <__ssputs_r>
 800348e:	3001      	adds	r0, #1
 8003490:	f000 80a9 	beq.w	80035e6 <_svfiprintf_r+0x1c6>
 8003494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003496:	445a      	add	r2, fp
 8003498:	9209      	str	r2, [sp, #36]	; 0x24
 800349a:	f89a 3000 	ldrb.w	r3, [sl]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a1 	beq.w	80035e6 <_svfiprintf_r+0x1c6>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f04f 32ff 	mov.w	r2, #4294967295
 80034aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034ae:	f10a 0a01 	add.w	sl, sl, #1
 80034b2:	9304      	str	r3, [sp, #16]
 80034b4:	9307      	str	r3, [sp, #28]
 80034b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ba:	931a      	str	r3, [sp, #104]	; 0x68
 80034bc:	4654      	mov	r4, sl
 80034be:	2205      	movs	r2, #5
 80034c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c4:	4850      	ldr	r0, [pc, #320]	; (8003608 <_svfiprintf_r+0x1e8>)
 80034c6:	f7fc fe9b 	bl	8000200 <memchr>
 80034ca:	9a04      	ldr	r2, [sp, #16]
 80034cc:	b9d8      	cbnz	r0, 8003506 <_svfiprintf_r+0xe6>
 80034ce:	06d0      	lsls	r0, r2, #27
 80034d0:	bf44      	itt	mi
 80034d2:	2320      	movmi	r3, #32
 80034d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034d8:	0711      	lsls	r1, r2, #28
 80034da:	bf44      	itt	mi
 80034dc:	232b      	movmi	r3, #43	; 0x2b
 80034de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e2:	f89a 3000 	ldrb.w	r3, [sl]
 80034e6:	2b2a      	cmp	r3, #42	; 0x2a
 80034e8:	d015      	beq.n	8003516 <_svfiprintf_r+0xf6>
 80034ea:	9a07      	ldr	r2, [sp, #28]
 80034ec:	4654      	mov	r4, sl
 80034ee:	2000      	movs	r0, #0
 80034f0:	f04f 0c0a 	mov.w	ip, #10
 80034f4:	4621      	mov	r1, r4
 80034f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034fa:	3b30      	subs	r3, #48	; 0x30
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	d94d      	bls.n	800359c <_svfiprintf_r+0x17c>
 8003500:	b1b0      	cbz	r0, 8003530 <_svfiprintf_r+0x110>
 8003502:	9207      	str	r2, [sp, #28]
 8003504:	e014      	b.n	8003530 <_svfiprintf_r+0x110>
 8003506:	eba0 0308 	sub.w	r3, r0, r8
 800350a:	fa09 f303 	lsl.w	r3, r9, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	9304      	str	r3, [sp, #16]
 8003512:	46a2      	mov	sl, r4
 8003514:	e7d2      	b.n	80034bc <_svfiprintf_r+0x9c>
 8003516:	9b03      	ldr	r3, [sp, #12]
 8003518:	1d19      	adds	r1, r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	9103      	str	r1, [sp, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	bfbb      	ittet	lt
 8003522:	425b      	neglt	r3, r3
 8003524:	f042 0202 	orrlt.w	r2, r2, #2
 8003528:	9307      	strge	r3, [sp, #28]
 800352a:	9307      	strlt	r3, [sp, #28]
 800352c:	bfb8      	it	lt
 800352e:	9204      	strlt	r2, [sp, #16]
 8003530:	7823      	ldrb	r3, [r4, #0]
 8003532:	2b2e      	cmp	r3, #46	; 0x2e
 8003534:	d10c      	bne.n	8003550 <_svfiprintf_r+0x130>
 8003536:	7863      	ldrb	r3, [r4, #1]
 8003538:	2b2a      	cmp	r3, #42	; 0x2a
 800353a:	d134      	bne.n	80035a6 <_svfiprintf_r+0x186>
 800353c:	9b03      	ldr	r3, [sp, #12]
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	9203      	str	r2, [sp, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	bfb8      	it	lt
 8003548:	f04f 33ff 	movlt.w	r3, #4294967295
 800354c:	3402      	adds	r4, #2
 800354e:	9305      	str	r3, [sp, #20]
 8003550:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003618 <_svfiprintf_r+0x1f8>
 8003554:	7821      	ldrb	r1, [r4, #0]
 8003556:	2203      	movs	r2, #3
 8003558:	4650      	mov	r0, sl
 800355a:	f7fc fe51 	bl	8000200 <memchr>
 800355e:	b138      	cbz	r0, 8003570 <_svfiprintf_r+0x150>
 8003560:	9b04      	ldr	r3, [sp, #16]
 8003562:	eba0 000a 	sub.w	r0, r0, sl
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	4082      	lsls	r2, r0
 800356a:	4313      	orrs	r3, r2
 800356c:	3401      	adds	r4, #1
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003574:	4825      	ldr	r0, [pc, #148]	; (800360c <_svfiprintf_r+0x1ec>)
 8003576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800357a:	2206      	movs	r2, #6
 800357c:	f7fc fe40 	bl	8000200 <memchr>
 8003580:	2800      	cmp	r0, #0
 8003582:	d038      	beq.n	80035f6 <_svfiprintf_r+0x1d6>
 8003584:	4b22      	ldr	r3, [pc, #136]	; (8003610 <_svfiprintf_r+0x1f0>)
 8003586:	bb1b      	cbnz	r3, 80035d0 <_svfiprintf_r+0x1b0>
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	3307      	adds	r3, #7
 800358c:	f023 0307 	bic.w	r3, r3, #7
 8003590:	3308      	adds	r3, #8
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003596:	4433      	add	r3, r6
 8003598:	9309      	str	r3, [sp, #36]	; 0x24
 800359a:	e768      	b.n	800346e <_svfiprintf_r+0x4e>
 800359c:	fb0c 3202 	mla	r2, ip, r2, r3
 80035a0:	460c      	mov	r4, r1
 80035a2:	2001      	movs	r0, #1
 80035a4:	e7a6      	b.n	80034f4 <_svfiprintf_r+0xd4>
 80035a6:	2300      	movs	r3, #0
 80035a8:	3401      	adds	r4, #1
 80035aa:	9305      	str	r3, [sp, #20]
 80035ac:	4619      	mov	r1, r3
 80035ae:	f04f 0c0a 	mov.w	ip, #10
 80035b2:	4620      	mov	r0, r4
 80035b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035b8:	3a30      	subs	r2, #48	; 0x30
 80035ba:	2a09      	cmp	r2, #9
 80035bc:	d903      	bls.n	80035c6 <_svfiprintf_r+0x1a6>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0c6      	beq.n	8003550 <_svfiprintf_r+0x130>
 80035c2:	9105      	str	r1, [sp, #20]
 80035c4:	e7c4      	b.n	8003550 <_svfiprintf_r+0x130>
 80035c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80035ca:	4604      	mov	r4, r0
 80035cc:	2301      	movs	r3, #1
 80035ce:	e7f0      	b.n	80035b2 <_svfiprintf_r+0x192>
 80035d0:	ab03      	add	r3, sp, #12
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	462a      	mov	r2, r5
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <_svfiprintf_r+0x1f4>)
 80035d8:	a904      	add	r1, sp, #16
 80035da:	4638      	mov	r0, r7
 80035dc:	f3af 8000 	nop.w
 80035e0:	1c42      	adds	r2, r0, #1
 80035e2:	4606      	mov	r6, r0
 80035e4:	d1d6      	bne.n	8003594 <_svfiprintf_r+0x174>
 80035e6:	89ab      	ldrh	r3, [r5, #12]
 80035e8:	065b      	lsls	r3, r3, #25
 80035ea:	f53f af2d 	bmi.w	8003448 <_svfiprintf_r+0x28>
 80035ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035f0:	b01d      	add	sp, #116	; 0x74
 80035f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f6:	ab03      	add	r3, sp, #12
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	462a      	mov	r2, r5
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <_svfiprintf_r+0x1f4>)
 80035fe:	a904      	add	r1, sp, #16
 8003600:	4638      	mov	r0, r7
 8003602:	f000 f879 	bl	80036f8 <_printf_i>
 8003606:	e7eb      	b.n	80035e0 <_svfiprintf_r+0x1c0>
 8003608:	08003a74 	.word	0x08003a74
 800360c:	08003a7e 	.word	0x08003a7e
 8003610:	00000000 	.word	0x00000000
 8003614:	0800336d 	.word	0x0800336d
 8003618:	08003a7a 	.word	0x08003a7a

0800361c <_printf_common>:
 800361c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003620:	4616      	mov	r6, r2
 8003622:	4699      	mov	r9, r3
 8003624:	688a      	ldr	r2, [r1, #8]
 8003626:	690b      	ldr	r3, [r1, #16]
 8003628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800362c:	4293      	cmp	r3, r2
 800362e:	bfb8      	it	lt
 8003630:	4613      	movlt	r3, r2
 8003632:	6033      	str	r3, [r6, #0]
 8003634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003638:	4607      	mov	r7, r0
 800363a:	460c      	mov	r4, r1
 800363c:	b10a      	cbz	r2, 8003642 <_printf_common+0x26>
 800363e:	3301      	adds	r3, #1
 8003640:	6033      	str	r3, [r6, #0]
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	0699      	lsls	r1, r3, #26
 8003646:	bf42      	ittt	mi
 8003648:	6833      	ldrmi	r3, [r6, #0]
 800364a:	3302      	addmi	r3, #2
 800364c:	6033      	strmi	r3, [r6, #0]
 800364e:	6825      	ldr	r5, [r4, #0]
 8003650:	f015 0506 	ands.w	r5, r5, #6
 8003654:	d106      	bne.n	8003664 <_printf_common+0x48>
 8003656:	f104 0a19 	add.w	sl, r4, #25
 800365a:	68e3      	ldr	r3, [r4, #12]
 800365c:	6832      	ldr	r2, [r6, #0]
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	42ab      	cmp	r3, r5
 8003662:	dc26      	bgt.n	80036b2 <_printf_common+0x96>
 8003664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003668:	1e13      	subs	r3, r2, #0
 800366a:	6822      	ldr	r2, [r4, #0]
 800366c:	bf18      	it	ne
 800366e:	2301      	movne	r3, #1
 8003670:	0692      	lsls	r2, r2, #26
 8003672:	d42b      	bmi.n	80036cc <_printf_common+0xb0>
 8003674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003678:	4649      	mov	r1, r9
 800367a:	4638      	mov	r0, r7
 800367c:	47c0      	blx	r8
 800367e:	3001      	adds	r0, #1
 8003680:	d01e      	beq.n	80036c0 <_printf_common+0xa4>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	6922      	ldr	r2, [r4, #16]
 8003686:	f003 0306 	and.w	r3, r3, #6
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf02      	ittt	eq
 800368e:	68e5      	ldreq	r5, [r4, #12]
 8003690:	6833      	ldreq	r3, [r6, #0]
 8003692:	1aed      	subeq	r5, r5, r3
 8003694:	68a3      	ldr	r3, [r4, #8]
 8003696:	bf0c      	ite	eq
 8003698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800369c:	2500      	movne	r5, #0
 800369e:	4293      	cmp	r3, r2
 80036a0:	bfc4      	itt	gt
 80036a2:	1a9b      	subgt	r3, r3, r2
 80036a4:	18ed      	addgt	r5, r5, r3
 80036a6:	2600      	movs	r6, #0
 80036a8:	341a      	adds	r4, #26
 80036aa:	42b5      	cmp	r5, r6
 80036ac:	d11a      	bne.n	80036e4 <_printf_common+0xc8>
 80036ae:	2000      	movs	r0, #0
 80036b0:	e008      	b.n	80036c4 <_printf_common+0xa8>
 80036b2:	2301      	movs	r3, #1
 80036b4:	4652      	mov	r2, sl
 80036b6:	4649      	mov	r1, r9
 80036b8:	4638      	mov	r0, r7
 80036ba:	47c0      	blx	r8
 80036bc:	3001      	adds	r0, #1
 80036be:	d103      	bne.n	80036c8 <_printf_common+0xac>
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c8:	3501      	adds	r5, #1
 80036ca:	e7c6      	b.n	800365a <_printf_common+0x3e>
 80036cc:	18e1      	adds	r1, r4, r3
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	2030      	movs	r0, #48	; 0x30
 80036d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036d6:	4422      	add	r2, r4
 80036d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036e0:	3302      	adds	r3, #2
 80036e2:	e7c7      	b.n	8003674 <_printf_common+0x58>
 80036e4:	2301      	movs	r3, #1
 80036e6:	4622      	mov	r2, r4
 80036e8:	4649      	mov	r1, r9
 80036ea:	4638      	mov	r0, r7
 80036ec:	47c0      	blx	r8
 80036ee:	3001      	adds	r0, #1
 80036f0:	d0e6      	beq.n	80036c0 <_printf_common+0xa4>
 80036f2:	3601      	adds	r6, #1
 80036f4:	e7d9      	b.n	80036aa <_printf_common+0x8e>
	...

080036f8 <_printf_i>:
 80036f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036fc:	7e0f      	ldrb	r7, [r1, #24]
 80036fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003700:	2f78      	cmp	r7, #120	; 0x78
 8003702:	4691      	mov	r9, r2
 8003704:	4680      	mov	r8, r0
 8003706:	460c      	mov	r4, r1
 8003708:	469a      	mov	sl, r3
 800370a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800370e:	d807      	bhi.n	8003720 <_printf_i+0x28>
 8003710:	2f62      	cmp	r7, #98	; 0x62
 8003712:	d80a      	bhi.n	800372a <_printf_i+0x32>
 8003714:	2f00      	cmp	r7, #0
 8003716:	f000 80d4 	beq.w	80038c2 <_printf_i+0x1ca>
 800371a:	2f58      	cmp	r7, #88	; 0x58
 800371c:	f000 80c0 	beq.w	80038a0 <_printf_i+0x1a8>
 8003720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003728:	e03a      	b.n	80037a0 <_printf_i+0xa8>
 800372a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800372e:	2b15      	cmp	r3, #21
 8003730:	d8f6      	bhi.n	8003720 <_printf_i+0x28>
 8003732:	a101      	add	r1, pc, #4	; (adr r1, 8003738 <_printf_i+0x40>)
 8003734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003738:	08003791 	.word	0x08003791
 800373c:	080037a5 	.word	0x080037a5
 8003740:	08003721 	.word	0x08003721
 8003744:	08003721 	.word	0x08003721
 8003748:	08003721 	.word	0x08003721
 800374c:	08003721 	.word	0x08003721
 8003750:	080037a5 	.word	0x080037a5
 8003754:	08003721 	.word	0x08003721
 8003758:	08003721 	.word	0x08003721
 800375c:	08003721 	.word	0x08003721
 8003760:	08003721 	.word	0x08003721
 8003764:	080038a9 	.word	0x080038a9
 8003768:	080037d1 	.word	0x080037d1
 800376c:	08003863 	.word	0x08003863
 8003770:	08003721 	.word	0x08003721
 8003774:	08003721 	.word	0x08003721
 8003778:	080038cb 	.word	0x080038cb
 800377c:	08003721 	.word	0x08003721
 8003780:	080037d1 	.word	0x080037d1
 8003784:	08003721 	.word	0x08003721
 8003788:	08003721 	.word	0x08003721
 800378c:	0800386b 	.word	0x0800386b
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	602a      	str	r2, [r5, #0]
 8003798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800379c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037a0:	2301      	movs	r3, #1
 80037a2:	e09f      	b.n	80038e4 <_printf_i+0x1ec>
 80037a4:	6820      	ldr	r0, [r4, #0]
 80037a6:	682b      	ldr	r3, [r5, #0]
 80037a8:	0607      	lsls	r7, r0, #24
 80037aa:	f103 0104 	add.w	r1, r3, #4
 80037ae:	6029      	str	r1, [r5, #0]
 80037b0:	d501      	bpl.n	80037b6 <_printf_i+0xbe>
 80037b2:	681e      	ldr	r6, [r3, #0]
 80037b4:	e003      	b.n	80037be <_printf_i+0xc6>
 80037b6:	0646      	lsls	r6, r0, #25
 80037b8:	d5fb      	bpl.n	80037b2 <_printf_i+0xba>
 80037ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037be:	2e00      	cmp	r6, #0
 80037c0:	da03      	bge.n	80037ca <_printf_i+0xd2>
 80037c2:	232d      	movs	r3, #45	; 0x2d
 80037c4:	4276      	negs	r6, r6
 80037c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ca:	485a      	ldr	r0, [pc, #360]	; (8003934 <_printf_i+0x23c>)
 80037cc:	230a      	movs	r3, #10
 80037ce:	e012      	b.n	80037f6 <_printf_i+0xfe>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	6820      	ldr	r0, [r4, #0]
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	6029      	str	r1, [r5, #0]
 80037d8:	0605      	lsls	r5, r0, #24
 80037da:	d501      	bpl.n	80037e0 <_printf_i+0xe8>
 80037dc:	681e      	ldr	r6, [r3, #0]
 80037de:	e002      	b.n	80037e6 <_printf_i+0xee>
 80037e0:	0641      	lsls	r1, r0, #25
 80037e2:	d5fb      	bpl.n	80037dc <_printf_i+0xe4>
 80037e4:	881e      	ldrh	r6, [r3, #0]
 80037e6:	4853      	ldr	r0, [pc, #332]	; (8003934 <_printf_i+0x23c>)
 80037e8:	2f6f      	cmp	r7, #111	; 0x6f
 80037ea:	bf0c      	ite	eq
 80037ec:	2308      	moveq	r3, #8
 80037ee:	230a      	movne	r3, #10
 80037f0:	2100      	movs	r1, #0
 80037f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037f6:	6865      	ldr	r5, [r4, #4]
 80037f8:	60a5      	str	r5, [r4, #8]
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	bfa2      	ittt	ge
 80037fe:	6821      	ldrge	r1, [r4, #0]
 8003800:	f021 0104 	bicge.w	r1, r1, #4
 8003804:	6021      	strge	r1, [r4, #0]
 8003806:	b90e      	cbnz	r6, 800380c <_printf_i+0x114>
 8003808:	2d00      	cmp	r5, #0
 800380a:	d04b      	beq.n	80038a4 <_printf_i+0x1ac>
 800380c:	4615      	mov	r5, r2
 800380e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003812:	fb03 6711 	mls	r7, r3, r1, r6
 8003816:	5dc7      	ldrb	r7, [r0, r7]
 8003818:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800381c:	4637      	mov	r7, r6
 800381e:	42bb      	cmp	r3, r7
 8003820:	460e      	mov	r6, r1
 8003822:	d9f4      	bls.n	800380e <_printf_i+0x116>
 8003824:	2b08      	cmp	r3, #8
 8003826:	d10b      	bne.n	8003840 <_printf_i+0x148>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	07de      	lsls	r6, r3, #31
 800382c:	d508      	bpl.n	8003840 <_printf_i+0x148>
 800382e:	6923      	ldr	r3, [r4, #16]
 8003830:	6861      	ldr	r1, [r4, #4]
 8003832:	4299      	cmp	r1, r3
 8003834:	bfde      	ittt	le
 8003836:	2330      	movle	r3, #48	; 0x30
 8003838:	f805 3c01 	strble.w	r3, [r5, #-1]
 800383c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003840:	1b52      	subs	r2, r2, r5
 8003842:	6122      	str	r2, [r4, #16]
 8003844:	f8cd a000 	str.w	sl, [sp]
 8003848:	464b      	mov	r3, r9
 800384a:	aa03      	add	r2, sp, #12
 800384c:	4621      	mov	r1, r4
 800384e:	4640      	mov	r0, r8
 8003850:	f7ff fee4 	bl	800361c <_printf_common>
 8003854:	3001      	adds	r0, #1
 8003856:	d14a      	bne.n	80038ee <_printf_i+0x1f6>
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	b004      	add	sp, #16
 800385e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	f043 0320 	orr.w	r3, r3, #32
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	4833      	ldr	r0, [pc, #204]	; (8003938 <_printf_i+0x240>)
 800386c:	2778      	movs	r7, #120	; 0x78
 800386e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	6829      	ldr	r1, [r5, #0]
 8003876:	061f      	lsls	r7, r3, #24
 8003878:	f851 6b04 	ldr.w	r6, [r1], #4
 800387c:	d402      	bmi.n	8003884 <_printf_i+0x18c>
 800387e:	065f      	lsls	r7, r3, #25
 8003880:	bf48      	it	mi
 8003882:	b2b6      	uxthmi	r6, r6
 8003884:	07df      	lsls	r7, r3, #31
 8003886:	bf48      	it	mi
 8003888:	f043 0320 	orrmi.w	r3, r3, #32
 800388c:	6029      	str	r1, [r5, #0]
 800388e:	bf48      	it	mi
 8003890:	6023      	strmi	r3, [r4, #0]
 8003892:	b91e      	cbnz	r6, 800389c <_printf_i+0x1a4>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	f023 0320 	bic.w	r3, r3, #32
 800389a:	6023      	str	r3, [r4, #0]
 800389c:	2310      	movs	r3, #16
 800389e:	e7a7      	b.n	80037f0 <_printf_i+0xf8>
 80038a0:	4824      	ldr	r0, [pc, #144]	; (8003934 <_printf_i+0x23c>)
 80038a2:	e7e4      	b.n	800386e <_printf_i+0x176>
 80038a4:	4615      	mov	r5, r2
 80038a6:	e7bd      	b.n	8003824 <_printf_i+0x12c>
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	6826      	ldr	r6, [r4, #0]
 80038ac:	6961      	ldr	r1, [r4, #20]
 80038ae:	1d18      	adds	r0, r3, #4
 80038b0:	6028      	str	r0, [r5, #0]
 80038b2:	0635      	lsls	r5, r6, #24
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	d501      	bpl.n	80038bc <_printf_i+0x1c4>
 80038b8:	6019      	str	r1, [r3, #0]
 80038ba:	e002      	b.n	80038c2 <_printf_i+0x1ca>
 80038bc:	0670      	lsls	r0, r6, #25
 80038be:	d5fb      	bpl.n	80038b8 <_printf_i+0x1c0>
 80038c0:	8019      	strh	r1, [r3, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	6123      	str	r3, [r4, #16]
 80038c6:	4615      	mov	r5, r2
 80038c8:	e7bc      	b.n	8003844 <_printf_i+0x14c>
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	1d1a      	adds	r2, r3, #4
 80038ce:	602a      	str	r2, [r5, #0]
 80038d0:	681d      	ldr	r5, [r3, #0]
 80038d2:	6862      	ldr	r2, [r4, #4]
 80038d4:	2100      	movs	r1, #0
 80038d6:	4628      	mov	r0, r5
 80038d8:	f7fc fc92 	bl	8000200 <memchr>
 80038dc:	b108      	cbz	r0, 80038e2 <_printf_i+0x1ea>
 80038de:	1b40      	subs	r0, r0, r5
 80038e0:	6060      	str	r0, [r4, #4]
 80038e2:	6863      	ldr	r3, [r4, #4]
 80038e4:	6123      	str	r3, [r4, #16]
 80038e6:	2300      	movs	r3, #0
 80038e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ec:	e7aa      	b.n	8003844 <_printf_i+0x14c>
 80038ee:	6923      	ldr	r3, [r4, #16]
 80038f0:	462a      	mov	r2, r5
 80038f2:	4649      	mov	r1, r9
 80038f4:	4640      	mov	r0, r8
 80038f6:	47d0      	blx	sl
 80038f8:	3001      	adds	r0, #1
 80038fa:	d0ad      	beq.n	8003858 <_printf_i+0x160>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	079b      	lsls	r3, r3, #30
 8003900:	d413      	bmi.n	800392a <_printf_i+0x232>
 8003902:	68e0      	ldr	r0, [r4, #12]
 8003904:	9b03      	ldr	r3, [sp, #12]
 8003906:	4298      	cmp	r0, r3
 8003908:	bfb8      	it	lt
 800390a:	4618      	movlt	r0, r3
 800390c:	e7a6      	b.n	800385c <_printf_i+0x164>
 800390e:	2301      	movs	r3, #1
 8003910:	4632      	mov	r2, r6
 8003912:	4649      	mov	r1, r9
 8003914:	4640      	mov	r0, r8
 8003916:	47d0      	blx	sl
 8003918:	3001      	adds	r0, #1
 800391a:	d09d      	beq.n	8003858 <_printf_i+0x160>
 800391c:	3501      	adds	r5, #1
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	9903      	ldr	r1, [sp, #12]
 8003922:	1a5b      	subs	r3, r3, r1
 8003924:	42ab      	cmp	r3, r5
 8003926:	dcf2      	bgt.n	800390e <_printf_i+0x216>
 8003928:	e7eb      	b.n	8003902 <_printf_i+0x20a>
 800392a:	2500      	movs	r5, #0
 800392c:	f104 0619 	add.w	r6, r4, #25
 8003930:	e7f5      	b.n	800391e <_printf_i+0x226>
 8003932:	bf00      	nop
 8003934:	08003a85 	.word	0x08003a85
 8003938:	08003a96 	.word	0x08003a96

0800393c <memmove>:
 800393c:	4288      	cmp	r0, r1
 800393e:	b510      	push	{r4, lr}
 8003940:	eb01 0402 	add.w	r4, r1, r2
 8003944:	d902      	bls.n	800394c <memmove+0x10>
 8003946:	4284      	cmp	r4, r0
 8003948:	4623      	mov	r3, r4
 800394a:	d807      	bhi.n	800395c <memmove+0x20>
 800394c:	1e43      	subs	r3, r0, #1
 800394e:	42a1      	cmp	r1, r4
 8003950:	d008      	beq.n	8003964 <memmove+0x28>
 8003952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800395a:	e7f8      	b.n	800394e <memmove+0x12>
 800395c:	4402      	add	r2, r0
 800395e:	4601      	mov	r1, r0
 8003960:	428a      	cmp	r2, r1
 8003962:	d100      	bne.n	8003966 <memmove+0x2a>
 8003964:	bd10      	pop	{r4, pc}
 8003966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800396a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800396e:	e7f7      	b.n	8003960 <memmove+0x24>

08003970 <_sbrk_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4d06      	ldr	r5, [pc, #24]	; (800398c <_sbrk_r+0x1c>)
 8003974:	2300      	movs	r3, #0
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	602b      	str	r3, [r5, #0]
 800397c:	f7fd f920 	bl	8000bc0 <_sbrk>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d102      	bne.n	800398a <_sbrk_r+0x1a>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	b103      	cbz	r3, 800398a <_sbrk_r+0x1a>
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	20000290 	.word	0x20000290

08003990 <memcpy>:
 8003990:	440a      	add	r2, r1
 8003992:	4291      	cmp	r1, r2
 8003994:	f100 33ff 	add.w	r3, r0, #4294967295
 8003998:	d100      	bne.n	800399c <memcpy+0xc>
 800399a:	4770      	bx	lr
 800399c:	b510      	push	{r4, lr}
 800399e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039a6:	4291      	cmp	r1, r2
 80039a8:	d1f9      	bne.n	800399e <memcpy+0xe>
 80039aa:	bd10      	pop	{r4, pc}

080039ac <_realloc_r>:
 80039ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b0:	4680      	mov	r8, r0
 80039b2:	4614      	mov	r4, r2
 80039b4:	460e      	mov	r6, r1
 80039b6:	b921      	cbnz	r1, 80039c2 <_realloc_r+0x16>
 80039b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039bc:	4611      	mov	r1, r2
 80039be:	f7ff bc49 	b.w	8003254 <_malloc_r>
 80039c2:	b92a      	cbnz	r2, 80039d0 <_realloc_r+0x24>
 80039c4:	f7ff fbda 	bl	800317c <_free_r>
 80039c8:	4625      	mov	r5, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d0:	f000 f81b 	bl	8003a0a <_malloc_usable_size_r>
 80039d4:	4284      	cmp	r4, r0
 80039d6:	4607      	mov	r7, r0
 80039d8:	d802      	bhi.n	80039e0 <_realloc_r+0x34>
 80039da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039de:	d812      	bhi.n	8003a06 <_realloc_r+0x5a>
 80039e0:	4621      	mov	r1, r4
 80039e2:	4640      	mov	r0, r8
 80039e4:	f7ff fc36 	bl	8003254 <_malloc_r>
 80039e8:	4605      	mov	r5, r0
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d0ed      	beq.n	80039ca <_realloc_r+0x1e>
 80039ee:	42bc      	cmp	r4, r7
 80039f0:	4622      	mov	r2, r4
 80039f2:	4631      	mov	r1, r6
 80039f4:	bf28      	it	cs
 80039f6:	463a      	movcs	r2, r7
 80039f8:	f7ff ffca 	bl	8003990 <memcpy>
 80039fc:	4631      	mov	r1, r6
 80039fe:	4640      	mov	r0, r8
 8003a00:	f7ff fbbc 	bl	800317c <_free_r>
 8003a04:	e7e1      	b.n	80039ca <_realloc_r+0x1e>
 8003a06:	4635      	mov	r5, r6
 8003a08:	e7df      	b.n	80039ca <_realloc_r+0x1e>

08003a0a <_malloc_usable_size_r>:
 8003a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a0e:	1f18      	subs	r0, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bfbc      	itt	lt
 8003a14:	580b      	ldrlt	r3, [r1, r0]
 8003a16:	18c0      	addlt	r0, r0, r3
 8003a18:	4770      	bx	lr
	...

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
